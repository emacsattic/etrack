;;; example etrack configuration -*- scheme -*-

;; The name of the configuration and the backend database.
(name     . "Example Expenses")
(database . etrack_example)

;; Attribute codes are defined as the first character of the attribute
;; names, so you need to be somewhat careful about this.
(attributes . (vehicle
               household
               food
               utilities
               entertainment
               rent
               misc
               insurance))

;;; (query . (FLAVOR "DESCRIPTION" ...))
;;;
;;; There are several flavors of query: simple, drill-down and custom.
;;; The first two rely solely on the attribute codes.  By default, a
;;; simple query is created for each of the attributes, so you don't
;;; have to do that here.  Descriptions are short strings that describe
;;; the query, and may include embedded spaces.

;; (query . (simple "DESCRIPTION" QUERY-CODE))
;; (query . (simple-list "DESC-1" Q-CODE-1 "DESC-2" Q-CODE-2 ...))
;;
;; QUERY-CODE is `!!' for "all", or a series of attribute codes which
;; are ANDed together.  If a attribute code is prefixed with "!", its sense
;; is inverted.

(query . (simple-list
          "all"                 !!
          "all no rent"         !r
          "eating out"          fe
          "fun not food"        e!f
          "food not fun"        f!e
          ))

;; (query . (drill-down ATTRIBUTE (DETAILS ...)))
;; (query . (drill-down-list ATTR-1 (DET-1 ...) ATTR-2 (DET-2 ...) ...))
;;
;; ATTRIBUTE is one of the defined attributes.  DETAILS is a list of strings
;; that are searched in the first two slots of the `details' field.  The
;; description for the query is formed like so: "ATTRIBUTE / DETAIL".

(query . (drill-down-list

          utilities ("cable"
                     "sdge"
                     "phone")

          vehicle ("gas"
                   "car"
                   "moto"
                   "bike")))

;; (query . (custom "DESCRIPTION" QUERY-THUNK))
;;
;; QUERY-THUNK is a Scheme procedure that takes no args and must finish with
;; a query using either `select' or `one-row-table-query'.

(query . (custom "sum of numbers from 0-10"
                 (lambda ()
                   (one-row-table-query
                    `(,@(iota 11) sum)
                    `(,@(iota 11) ,(apply + (iota 11)))))))

;;; example.etrack.conf ends here
